configurations {
    wsimport
}

group = 'de.dhl'
version = '2.0'

sourceSets {
    wsimport
    main {
        compileClasspath += wsimport.output
        runtimeClasspath += wsimport.output
    }
}

task wsimport(type:Exec) {
    doFirst {
        sourceSets.wsimport.java.srcDirs[0].mkdirs()
        sourceSets.wsimport.output.classesDirs[0].mkdirs()
    }
    commandLine 'wsimport', '-J-Djavax.xml.accessExternalSchema=all', '-s', sourceSets.wsimport.java.srcDirs[0], '-d', sourceSets.wsimport.output.classesDirs[0], '-keep', '-p', 'de.dhl.onlinefrankierung.webservice', 'https://cig.dhl.de/cig-wsdls/com/dpdhl/wsdl/privatkundenversand-api/2.0/privatkundenversand-api-2.0.wsdl', '-b', 'https://cig.dhl.de/cig-wsdls/com/dpdhl/wsdl/privatkundenversand-api/popws/2.0/popws-2.0.xsd', '-b', 'https://cig.dhl.de/cig-wsdls/com/dpdhl/wsdl/privatkundenversand-api/poppdb/2.0/poppdb-2.0.xsd', '-Xnocompile', '-XadditionalHeaders'
    onlyIf {
        !sourceSets.wsimport.java.srcDirs[0].exists()
    }
}

wsimport.outputs.dir sourceSets.wsimport.java.srcDirs[0]

compileWsimportJava.dependsOn(wsimport)
compileJava.dependsOn(compileWsimportJava)

jar.from sourceSets.wsimport.runtimeClasspath
sourcesJar.from sourceSets.wsimport.allJava, sourceSets.main.allJava

clean {
    delete sourceSets.wsimport.java.srcDirs
}
